import { 
  Bot, 
  Context, 
  Keyboard, 
} from "https://deno.land/x/grammy@v1.32.0/mod.ts"; 
import { menuKeyboard, yesOrNo } from "./keyboards.ts"; // –∏–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä 
import { 
  getProfile, 
  getSimularUsers, 
  getUser, 
  reviewProfile, 
  setState, 
} from "./functions.ts"; //–∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π 
import { createClient } from "npm:@supabase/supabase-js"; // database 
import { UserInfo } from "./interfaces.ts"; 
 
// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è supabase 
const supabaseUrl = "https://skabfydkbgdodqxttswh.supabase.co"; 
const supabaseKey = Deno.env.get("SUPABASE_KEY") || ""; 
const supabase = createClient(supabaseUrl, supabaseKey); 
await supabase.auth.signInAnonymously() 
export const users = supabase.from("users"); 
 
//–æ–±—ä—è–≤–∏–ª –±–æ—Ç–∞ 
export const bot = new Bot<Context>(Deno.env.get("BOT_TOKEN") || "7556907097:AAFerRjuaou1JjXBVaRwp4b5sKq_EAo9vRM"); 
 
// –ª–æ–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ 
export const info: UserInfo = { 
  id: 0, 
  name: "", 
  age: 0, 
  interests: [], 
  lat: 0, 
  long: 0, 
  time: "", 
  state: "", 
  rating: 0, 
  done: false, 
}; 
 
export const similarUsers: number[] = []; 
 
// info –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ (–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è) - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ 
bot.command("start", async (ctx) => { // –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start 
  info.id = Number(ctx.msg.from?.id); 
  if (await getProfile() && info.done == true) { 
    await ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${info.name}!`, { reply_markup: menuKeyboard }); 
  } else { 
    await users.insert({ 
      tg_id: info.id, 
      state: "setName", 
    }); 
    await ctx.reply( 
      "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º –≤ –≥–æ—Ä–æ–¥–µ", 
    ); 
    await ctx.reply( 
      "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.</b>", 
      { parse_mode: "HTML" }, // –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–≥–∏ –∏–∑ html 
    ); 
    setState("setName"); // —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–¥—Ç–∏ –∏–º—è 
  } 
}); 
 
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ 
bot.callbackQuery("interestsDone", async (ctx) => { 
  await ctx.answerCallbackQuery("") 
  await ctx.deleteMessage(); 
  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ!"); 
  await reviewProfile(ctx); 
}); 
bot.callbackQuery("interestsNotDone", async (ctx) => { 
  await ctx.answerCallbackQuery("") 
  await ctx.deleteMessage(); 
  await ctx.reply("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –µ—â–µ —É–≤–ª–µ—á–µ–Ω–∏–π!"); 
  setState("setInterests"); 
}); 
 
bot.hears( 
  ["–ø—Ä–æ—Ñ–∏–ª—å", "–ü—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"], 
  async (ctx) => { 
    await reviewProfile(ctx); 
  }, 
); 
 
bot.on("message", async (ctx) => { 
  if (info.state) { // –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç–æ–º info.state 
    switch (info.state) { 
      case "searching": 
        if (ctx.message.text?.toLowerCase().includes("–ø–æ–∫–∞–∂–∏")) { 
          for (const person of similarUsers) { 
            const user = await getUser(person); 
            ctx.reply(user.name) 
          } 
        } else { 
          ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç"); 
        } 
        break; 
      case "setName": 
        if ( 
          typeof ctx.msg.text !== "string" || 
          /[0-9_.*^%$#@!]/.test(ctx.msg.text) // —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ 
        ) { 
          await ctx.reply( 
            "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º.", 
          ); 
          return; 
        } else { 
          info.name = ctx.msg.text || ""; //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 
          await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + info.name + "!"); 
          await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç"); 
          setState("setAge"); 
        } 
        break; 
 
      case "setAge": 
        if (isNaN(Number(ctx.msg.text))) { 
          await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!"); 
          return; 
        } 
        info.age = Number(ctx.msg.text); 
        await ctx.reply( 
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", 
        ); 
        await ctx.reply( 
          "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—ÉüñáÔ∏è -> –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç", 
        ); 
        setState("setGeo"); 
        break; 
 
      case "review": 
        switch (ctx.msg.text) { 
          case "–î–∞!": 
            info.done = true; 
            await ctx.reply("–ó–¥–æ—Ä–æ–≤–æ–æ!", { reply_markup: menuKeyboard }); 
            const { data, error } =
await users.update({ 
              name: info.name, 
              age: info.age, 
              lat: info.lat, 
              long: info.long, 
              time: info.time, 
              interests: info.interests, 
              done: info.done, 
            }).eq("tg_id", info.id).single(); 
            console.log(data, error, info); 
            setState("searching"); 
            break; 
 
          case "–ù–µ—Ç, —Ö–æ—á—É –∏–∑–º–µ–Ω–∏—Ç—å": 
            setState("setName"); 
            await ctx.reply("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"); 
            info.interests = []; 
            break; 
 
          default: 
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"); 
            break; 
        } 
        break; 
      case "setGeo": 
        if (!ctx.msg.location) { 
          await ctx.reply( 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", 
          ); 
          return; 
        } 
        info.lat = ctx.msg.location?.latitude; 
        info.long = ctx.msg.location?.longitude; // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ –≤–∏–¥–µ: —à–∏—Ä–∏–Ω–∞, –¥–æ–ª–≥–æ—Ç–∞ 
        await ctx.reply( 
          "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è", 
        ); 
        setState("setInterests"); 
        break; 
 
      case "setInterests": 
        if (ctx.msg.text) { 
          for (const interest of ctx.msg.text?.split(",")) { 
            info.interests.push(interest.trim()); 
          } 
        } 
        await ctx.reply( 
          "–°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:", 
        ); 
        await ctx.reply( 
          info.interests.toString(), 
        ); 
        await ctx.reply("–≠—Ç–æ –≤—Å–µ?", { reply_markup: yesOrNo }); // —Å–º–æ—Ç—Ä–∏ bot.callbackQuery 
        break; 
 
      default: 
        break; 
    } 
  } 
});
